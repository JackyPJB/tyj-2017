<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/mvc
       http://www.springframework.org/schema/mvc/spring-mvc.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop.xsd">

	<!-- 开启自动扫描，在指定的路劲及子路径下扫描，将扫描到的的bean 注册到spring的bean中-->
	<context:component-scan base-package="cn.tyj.dao.data"/>

	<!--DRUID连接池的实用 配置详解：http://www.cnblogs.com/wuyun-blog/p/5679073.html-->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init"
	      destroy-method="close">
		<!--这一项可配可不配，如果不配置druid会根据url自动识别dbType，然后选择相应的driverClassName(建议配置下)-->
		<property name="driverClassName" value="${jdbc.driverClassName}"/>
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<!--连接数据库的密码。如果你不希望密码直接写在配置文件中，可以使用ConfigFilter。-->
		<property name="password" value="${jdbc.password}" />

		<!-- 配置连接池初始化时建立物理连接的个数。初始化发生在显示调用init方法，或者第一次getConnection时-->
		<property name="initialSize" value="${initialSize}" />
		<!--连接池的最大数据库连接数。设为0表示无限制。一般把maxActive设置成可能的并发量就行了-->
		<property name="maxActive" value="${maxActive}" />
		<!--连接池中存在的最小连接数目。连接池中连接数目可以变很少，如果使用了maxAge属性，有些空闲的连接会被关闭因为离它最近一次连接的时间过去太久了。但是，我们看到的打开的连接不会少于minIdle。-->
		<property name="minIdle" value="${minIdle}" />
		<!-- 配置获取连接等待超时的时间 如果超过此时间将接到异常。设为-1表示无限制。 -->
		<property name="maxWait" value="${maxWait}" />
		<!--是否打开自动回收超时连接功能-->
		<property name="removeAbandoned" value="${removeAbandoned}" />
		<!--设置被遗弃的连接的超时的时间（以秒数为单位），即当一个连接被遗弃的时间超过设置的时间，则它会自动转换成可利用的连接。默认的超时时间是300秒。-->
		<property name="removeAbandonedTimeout" value="${removeAbandonedTimeout}" />
		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="${timeBetweenEvictionRunsMillis}" />
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="${minEvictableIdleTimeMillis}" />
		<!--用来检测连接是否有效的sql，要求是一个查询语句。如果validationQuery为null，testOnBorrow、testOnReturn、testWhileIdle都不会其作用。-->
		<property name="validationQuery" value="${validationQuery}" />
		<!--建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。-->
		<property name="testWhileIdle" value="${testWhileIdle}" />
		<!--申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。-->
		<property name="testOnBorrow" value="${testOnBorrow}" />
		<!--归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能-->
		<property name="testOnReturn" value="${testOnReturn}" />
		<!-- 是否缓存preparedStatement，也就是PSCache,默认是false。PSCache对支持游标的数据库性能提升巨大，比如说oracle。在 mysql并且JAVA7 以下 下建议关闭。 -->
		<property name="poolPreparedStatements" value="${poolPreparedStatements}" />
		<!--启用PSCache，必须配置大于0，当大于0时，poolPreparedStatements自动触发修改为true。在Druid中，不会存在Oracle下PSCache占用内存过多的问题，可以把这个数值配置大一些，比如说100-->
		<property name="maxPoolPreparedStatementPerConnectionSize" value="${maxPoolPreparedStatementPerConnectionSize}" />
		<!--属性类型是字符串，通过别名的方式配置扩展插件，常用的插件有： 监控统计用的filter:stat日志用的filter:log4j防御sql注入的filter:wall-->
		<property name="filters" value="${filters}" />
	</bean>

	<!--Mybatis sqlSessionFactory配置-->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="configLocation" value="classpath:mybatis-config.xml" />
		<!--配置mapper.xml文件位置-->
		<property name="mapperLocations">
			<list>
				<value>classpath*:mappers/*.xml</value>
			</list>
		</property>
	</bean>
	<!--扫描mapper接口，和<context:component-scan base-package="cn.tyj.dao.data"/>配合使用 http://www.cnblogs.com/daxin/p/3545040.html-->
	<bean name="mapperScannerConfigurer" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
		<property name="basePackage" value="cn.tyj.dao.mapper" />
		<!--<property name="annotationClass" value="" />-->
		<!--<property name="markerInterface" value="" />-->
	</bean>

	<!--声明式事务管理 需要添加 aspectjweaver 包的依赖 一定要将Mysql的引擎改为InnoDB，不然没法使用事务管理！搞了我半天！怎么改，参考 http://blog.csdn.net/wenwenxiong/article/details/46793167-->
	<!--定义事物管理器，由spring管理事务 -->
	<!--<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">-->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"/>
	</bean>

	<!-- 启动AOP支持 -->
	<!--<aop:aspectj-autoproxy/>-->
	<!--有时候配置明明没有问题，但是事务还是不回滚，可能：1.数据库引擎不支持事务管理 2.Controller又加载了一遍Service覆盖了-->
	<!-- 声明式事务  方式一：使用 @Transactional 标记 -->
	<!--<tx:annotation-driven transaction-manager="transactionManager" />-->
	<!--
	（1）切入点  Pointcut
		在介绍Pointcut之前，有必要先介绍  Join  Point（连接点）概念。
		连接点：程序运行中的某个阶段点，比如方法的调用、异常的抛出等。比如方法doSome();
		Pointcut是JoinPoint的集合，它是程序中需要注入Advice 的位置的集合，指明Advice要在什么样的条件下才能被触发。
	    org.springframework.aop.Pointcut接口用来指定到特定的类和方法。
	（2）通知Advice
		它是某个连接点所采用的处理逻辑，也就是向连接点注入的代码。例如：输出的日志信息   就是一个Advice
	（3）Advisor
		Advisor是Pointcut和Advice的配置器，它包括Pointcut和Advice，是将Advice注入程序中Pointcut位置的代码-->
	<!-- 配置切面 -->
	<!--通过 元素的 “proxy-target-class” 属性值来控制是基于接口的还是基于类的代理被创建。
	如果 “proxy-target-class” 属值被设置为 “true”，那么基于类的代理将起作用（这时需要CGLIB库cglib.jar在CLASSPATH中）。
	如果 “proxy-target-class” 属值被设置为 “false” 或者这个属性被省略，那么标准的JDK基于接口的代理将起作用。
	<aop:config proxy-target-class="false">-->
	<!-- 声明式事务  方式二：使用配置，在Service中就不用@Transactional了-->
	<aop:config>
		<!--<spring declarative transaction management -->
		<aop:advisor advice-ref="txAdvice"
		             pointcut="execution(public * cn.tyj.service.*.impl.*.*(..))"/>
	</aop:config>
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
<!--			事务行为控制 propagation默认是REQUIRED http://nannan408.iteye.com/blog/1754882
			异常的处理 http://blog.csdn.net/ljyhust/article/details/73431968?locationNum=5
			name=" " 匹配 serviceImpl 对应的 public 方法，注意，必须是public才有效-->
			<tx:method name="save*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
			<tx:method name="insert*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
			<tx:method name="delete*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
			<tx:method name="update*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
			<tx:method name="add*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
			<tx:method name="remove*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
			<tx:method name="modify*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
			<tx:method name="calculate*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
			<tx:method name="copy*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
			<tx:method name="create*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>

			<tx:method name="find*" propagation="SUPPORTS" read-only="true"/>
			<tx:method name="select*" propagation="SUPPORTS" read-only="true"/>
			<tx:method name="query*" propagation="SUPPORTS" read-only="true"/>
			<tx:method name="get*" propagation="SUPPORTS" read-only="true"/>
		</tx:attributes>
	</tx:advice>

	<!-- 配置druid监控spring jdbc 可以在 http://localhost:8080/tyj-web/druid/sql.html 的spring监控项看到监控信息（web.xml需要配置druid的servlet）-->
		<bean id="druid-stat-interceptor" class="com.alibaba.druid.support.spring.stat.DruidStatInterceptor"/>
		<bean id="druid-stat-pointcut" class="org.springframework.aop.support.JdkRegexpMethodPointcut"
			  scope="prototype">
			<property name="patterns">
				<list>
					<value>cn.tyj.service.*.*</value>
				</list>
			</property>
		</bean>
		<aop:config>
			<aop:advisor advice-ref="druid-stat-interceptor" pointcut-ref="druid-stat-pointcut" />
		</aop:config>
</beans>