<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>cn.tyj</groupId>
    <artifactId>tyj</artifactId>
    <packaging>pom</packaging>
    <version>1.0-SNAPSHOT</version>

    <!--参考 http://www.cnblogs.com/davenkin/p/advanced-maven-use-nexus.html -->
    <distributionManagement>
        <!--downloadUrl，一个URL，其他Maven项目可以通过该URL下载并引用当前Maven项目的构件。
        注意区别本文下面的<repository>中的URL，<repository>中的URL给出了当前Maven项目的构件的发布URL。-->
        <!--<downloadUrl>http://jcat.ericsson.org/my-project</downloadUrl> -->

        <!--给出Maven部署当前项目的构件到远程库时，关于远程库的配置。如下：-->
        <!--在项目中配置Nexus Repository的信息
        我们开始着手如何将自己的项目部署到Nexus Repository中。这个也简单，第一我们需要在项目中指明部署目的Repository的URL，第二我们需要提供用户名和密码，哪能让你胡来。
        对于一个Maven项目而言，如果你的项目版本号中有“SNAPSHOT”字样，则表示此时的项目是snapshot版本，即处于开发中。
        否则，Maven则认为这是一个release版本。所以我们在部署时，需要分别配置这两种发布版本所对应的Repository。在项目的pom.xml文件中配置需要发布的目标Repository：-->
        <!--release-->
        <repository>
            <id>nexus-releases</id>
            <url>http://121.199.48.159:8081/nexus/content/repositories/releases</url>
        </repository>
        <!--snap-->
        <snapshotRepository>
            <id>nexus-snapshots</id>
            <uniqueVersion>false</uniqueVersion>
            <url>http://121.199.48.159:8081/nexus/content/repositories/snapshots</url>
        </snapshotRepository>
    </distributionManagement>

    <!--配置maven仓库-->
    <repositories>
        <repository>
            <id>central1</id>
            <url>http://repo1.maven.org/maven2</url>
        </repository>
        <repository>
            <id>central2</id>
            <url>http://repo2.maven.org/maven2</url>
        </repository>
    </repositories>

    <modules>
        <module>tyj-web</module>
        <module>tyj-service</module>
        <module>tyj-dao</module>
        <module>mybatis-generator</module>
    </modules>

    <properties>
        <junit-version>4.12</junit-version>
        <project.Encoding>UTF-8</project.Encoding>
        <spring.version>4.3.10.RELEASE</spring.version>
        <mybatis.version>3.4.4</mybatis.version>
        <mybatis-spring.version>1.3.1</mybatis-spring.version>
        <mysql-connector-java.version>5.1.43</mysql-connector-java.version>
	    <aspectjweaver.version>1.8.10</aspectjweaver.version>
	    <cglib.version>3.2.5</cglib.version>
        <javax-servlet.version>3.1.0</javax-servlet.version>
        <logback.version>1.2.3</logback.version>
        <logback-spring.version>0.1.4</logback-spring.version>
        <slf4j.version>1.7.25</slf4j.version>
        <commons-lang.version>3.6</commons-lang.version>
        <commons-fileupload.version>1.3.3</commons-fileupload.version>
        <commons-io.version>2.5</commons-io.version>
        <jstl.version>1.2</jstl.version>
        <hibernate-validator.version>6.0.1.Final</hibernate-validator.version>
	    <alibaba-druid.version>1.0.31</alibaba-druid.version>
        <jackson.version>2.8.9</jackson.version>
        <weixin-java-mp.version>2.9.0</weixin-java-mp.version>
        <guava.version>20.0</guava.version>
        <fastjson.version>1.2.6</fastjson.version>
        <spring-security.version>4.1.3.RELEASE</spring-security.version>


    </properties>

    <!--配置文件在pom.xml文件中使用activeProfiles或者profiles元素指定，并且可以通过各种方式触发。
    配置文件在构建时修改POM，并且用来给参数设定不同的目标环境（比如说，开发（Development）、测试（Testing）和
    生产环境（Producation）中数据库服务器的地址）。参考 http://www.cnblogs.com/EasonJim/p/6828743.html -->
    <profiles>
        <profile>
            <id>test</id>
            <properties>
                <configPath>test</configPath>
            </properties>
            <!--<activation>激活配置文件，几种激活配置文件的方式，参考 http://juvenshun.iteye.com/blog/208714 -->
            <activation>
                <activeByDefault>true</activeByDefault>
            </activation>
        </profile>
        <profile>
            <id>product</id>
            <properties>
                <configPath>product</configPath>
            </properties>
        </profile>
    </profiles>

    <!--dependencies可以使得子模块继承父模块依赖的插件，同时dependencyManagement元素又能保证子模块使用的灵活性。
在dependencyManagement元素下的声明不会引入实际的依赖，不过它能够约束dependencies下的依赖使用。-->
    <dependencyManagement>
        <dependencies>
            <dependency>
                <!-- maven中的${project.groupId} 和 ${project.version}表示当前项目的groupId和版本。-->
                <groupId>${project.groupId}</groupId>
                <artifactId>tyj-service</artifactId>
                <version>${project.version}</version>
            </dependency>
            <dependency>
                <groupId>${project.groupId}</groupId>
                <artifactId>tyj-dao</artifactId>
                <version>${project.version}</version>
            </dependency>

            <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>${junit-version}</version>
            <scope>test</scope>
            </dependency>
	        <!--spring-core包含commons-logging和spring-core-->
<!--            <dependency>
                <groupId>org.springframework</groupId>
                <artifactId>spring-core</artifactId>
                <version>${spring.version}</version>
            </dependency>-->
	        <!--spring-web包含spring-web、spring-aop、spring-beans、spring-context、spring-expression、spring-core
	        所以用了spring-web就可以不要spring-core-->
<!--            <dependency>
                <groupId>org.springframework</groupId>
                <artifactId>spring-web</artifactId>
                <version>${spring.version}</version>
            </dependency>-->
	        <!--同样，spring-webmvc包含了spring-web和spring-core所有的内容外加spring-webmvc，用了spring-webmvc就不用spring-core和spring-web了-->
            <dependency>
                <groupId>org.springframework</groupId>
                <artifactId>spring-webmvc</artifactId>
                <version>${spring.version}</version>
            </dependency>
	        <!--spring-test包含spring-core和spring-test-->
            <dependency>
                <groupId>org.springframework</groupId>
                <artifactId>spring-test</artifactId>
                <version>${spring.version}</version>
            </dependency>
	        <!--spring-tx包含spring-core、spring-beans、spring-tx-->
<!--	        <dependency>
		        <groupId>org.springframework</groupId>
		        <artifactId>spring-tx</artifactId>
		        <version>${spring.version}</version>
	        </dependency>-->
	        <!--spring-orm包含了spring-jdbc、spring-tx-->
	        <dependency>
		        <groupId>org.springframework</groupId>
		        <artifactId>spring-orm</artifactId>
		        <version>${spring.version}</version>
	        </dependency>
            <dependency>
                <groupId>org.mybatis</groupId>
                <artifactId>mybatis</artifactId>
                <version>${mybatis.version}</version>
            </dependency>
            <dependency>
                <groupId>org.mybatis</groupId>
                <artifactId>mybatis-spring</artifactId>
                <version>${mybatis-spring.version}</version>
            </dependency>
            <dependency>
                <groupId>mysql</groupId>
                <artifactId>mysql-connector-java</artifactId>
                <version>${mysql-connector-java.version}</version>
            </dependency>
	        <!--事物管理需要的包-->
	        <dependency>
		        <groupId>org.aspectj</groupId>
		        <artifactId>aspectjweaver</artifactId>
		        <version>${aspectjweaver.version}</version>
	        </dependency>
	        <!--动态代理，在事务管理中，proxy-target-class="true"会用到，高级spring会自动选择true还是false，所以还是加入这个包吧-->
	        <dependency>
		        <groupId>cglib</groupId>
		        <artifactId>cglib</artifactId>
		        <version>${cglib.version}</version>
	        </dependency>
	        <dependency>
                <groupId>javax.servlet</groupId>
                <artifactId>javax.servlet-api</artifactId>
                <version>${javax-servlet.version}</version>
            </dependency>
            <!--logback所需的slf4j-api.jar、logback-core.jar及logback-classsic.jar-->
            <dependency>
                <groupId>ch.qos.logback</groupId>
                <artifactId>logback-classic</artifactId>
                <version>${logback.version}</version>
            </dependency>
            <dependency>
                <groupId>ch.qos.logback</groupId>
                <artifactId>logback-core</artifactId>
                <version>${logback.version}</version>
            </dependency>
            <dependency>
                <groupId>org.slf4j</groupId>
                <artifactId>slf4j-api</artifactId>
                <version>${slf4j.version}</version>
            </dependency>
            <!--logback-ext-spring是由官方提供的对Spring的支持，它的作用就相当于log4j中的Log4jConfigListener；这个listener，网上大多都是用的自己实现的，原因在于这个插件似乎并没有出现在官方文档的显要位置导致大多数人并不知道它的存在-->
            <dependency>
                <groupId>org.logback-extensions</groupId>
                <artifactId>logback-ext-spring</artifactId>
                <version>${logback-spring.version}</version>
            </dependency>
            <!--jcl-over-slf4j是用来把Spring源代码中大量使用到的commons-logging替换成slf4j，只有在添加了这个依赖之后才能看到Spring框架本身打印的日志，否则只能看到开发者自己打印的日志-->
            <dependency>
                <groupId>org.slf4j</groupId>
                <artifactId>jcl-over-slf4j</artifactId>
                <version>${slf4j.version}</version>
            </dependency>
            <dependency>
                <groupId>org.apache.commons</groupId>
                <artifactId>commons-lang3</artifactId>
                <version>${commons-lang.version}</version>
            </dependency>
            <dependency>
                <groupId>javax.servlet</groupId>
                <artifactId>jstl</artifactId>
                <version>${jstl.version}</version>
            </dependency>
            <dependency>
                <groupId>org.hibernate.validator</groupId>
                <artifactId>hibernate-validator</artifactId>
                <version>${hibernate-validator.version}</version>
            </dependency>
            <dependency>
                <groupId>commons-fileupload</groupId>
                <artifactId>commons-fileupload</artifactId>
                <version>${commons-fileupload.version}</version>
            </dependency>
            <dependency>
                <groupId>commons-io</groupId>
                <artifactId>commons-io</artifactId>
                <version>${commons-io.version}</version>
            </dependency>
	        <dependency>
		        <groupId>com.alibaba</groupId>
		        <artifactId>druid</artifactId>
		        <version>${alibaba-druid.version}</version>
	        </dependency>
	        <!--添加 jackson 对 json 的支持 jackson-databind 包含了 jackson-core和jackson-annotation 就不用添加他们了-->
	        <dependency>
		        <groupId>com.fasterxml.jackson.core</groupId>
		        <artifactId>jackson-databind</artifactId>
		        <version>${jackson.version}</version>
	        </dependency>
            <dependency>
                <groupId>com.github.binarywang</groupId>
                <artifactId>weixin-java-mp</artifactId>
                <version>${weixin-java-mp.version}</version>
            </dependency>
            <dependency>
                <groupId>com.google.guava</groupId>
                <artifactId>guava</artifactId>
                <version>${guava.version}</version>
            </dependency>
            <dependency>
                <groupId>org.springframework.security</groupId>
                <artifactId>spring-security-core</artifactId>
                <version>${spring-security.version}</version>
            </dependency>
            <dependency>
                <groupId>com.alibaba</groupId>
                <artifactId>fastjson</artifactId>
                <version>${fastjson.version}</version>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <build>
        <!--<defaultGoal>install</defaultGoal>-->
        <!--<directory>${basedir}/target</directory>-->
        <!--<finalName>${artifactId}-${version}</finalName>-->
        <!--defaultGoal，执行构建时默认的goal或phase，如jar:jar或者package等-->
        <!--directory，构建的结果所在的路径，默认为${basedir}/target目录-->
        <!--finalName，构建的最终结果的名字，该名字可能在其他plugin中被改变-->
        <finalName>tyj</finalName>
    </build>

</project>