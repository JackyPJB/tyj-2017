<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop.xsd">

<!--       使用context 需要加这两个
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd-->
    <!--<context:annotation-config /> <context:component-scan>覆盖了，可以省略这个 -->
    <context:component-scan base-package="cn.tyj.service" />

    <!--声明式事务管理 需要添加 aspectjweaver 包的依赖 一定要将Mysql的引擎改为InnoDB，不然没法使用事务管理！搞了我半天！怎么改，参考 http://blog.csdn.net/wenwenxiong/article/details/46793167-->
    <!--定义事物管理器，由spring管理事务 -->
    <!--<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!-- 启动AOP支持 -->
    <!--<aop:aspectj-autoproxy/>-->
    <!--有时候配置明明没有问题，但是事务还是不回滚，可能：1.数据库引擎不支持事务管理 2.Controller又加载了一遍Service覆盖了-->
    <!-- 声明式事务  方式一：使用 @Transactional 标记 -->
    <!--<tx:annotation-driven transaction-manager="transactionManager" />-->
    <!--
	（1）切入点  Pointcut
		在介绍Pointcut之前，有必要先介绍  Join  Point（连接点）概念。
		连接点：程序运行中的某个阶段点，比如方法的调用、异常的抛出等。比如方法doSome();
		Pointcut是JoinPoint的集合，它是程序中需要注入Advice 的位置的集合，指明Advice要在什么样的条件下才能被触发。
		org.springframework.aop.Pointcut接口用来指定到特定的类和方法。
	（2）通知Advice
		它是某个连接点所采用的处理逻辑，也就是向连接点注入的代码。例如：输出的日志信息   就是一个Advice
	（3）Advisor
		Advisor是Pointcut和Advice的配置器，它包括Pointcut和Advice，是将Advice注入程序中Pointcut位置的代码-->
    <!-- 配置切面 -->
    <!--通过 元素的 “proxy-target-class” 属性值来控制是基于接口的还是基于类的代理被创建。
	如果 “proxy-target-class” 属值被设置为 “true”，那么基于类的代理将起作用（这时需要CGLIB库cglib.jar在CLASSPATH中）。
	如果 “proxy-target-class” 属值被设置为 “false” 或者这个属性被省略，那么标准的JDK基于接口的代理将起作用。
	<aop:config proxy-target-class="false">-->
    <!-- 声明式事务  方式二：使用配置，在Service中就不用@Transactional了-->
    <aop:config>
        <!--<spring declarative transaction management -->
        <aop:advisor advice-ref="txAdvice"
                     pointcut="execution(public * cn.tyj.service.*.impl.*.*(..))"/>
    </aop:config>
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <!--			事务行为控制 propagation默认是REQUIRED http://nannan408.iteye.com/blog/1754882
						异常的处理 http://blog.csdn.net/ljyhust/article/details/73431968?locationNum=5
						name=" " 匹配 serviceImpl 对应的 public 方法，注意，必须是public才有效-->
            <tx:method name="save*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
            <tx:method name="insert*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
            <tx:method name="delete*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
            <tx:method name="update*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
            <tx:method name="add*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
            <tx:method name="remove*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
            <tx:method name="modify*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
            <tx:method name="calculate*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
            <tx:method name="copy*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
            <tx:method name="create*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>

            <tx:method name="find*" propagation="SUPPORTS" read-only="true"/>
            <tx:method name="select*" propagation="SUPPORTS" read-only="true"/>
            <tx:method name="query*" propagation="SUPPORTS" read-only="true"/>
            <tx:method name="get*" propagation="SUPPORTS" read-only="true"/>
        </tx:attributes>
    </tx:advice>
</beans>